{"version":3,"sources":["component/Artist.jsx","component/Track.jsx","component/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Artist","_ref","artist","name","followers","genres","images","react_default","a","createElement","className","src","url","alt","style","width","total","join","Track","state","playing","audio","playingPreviewUrl","playAudio","previewUrl","Audio","_this","pause","setState","play","trackIcon","track","preview_url","_this2","this","tracks","props","console","log","map","id","album","key","onClick","cursor","Component","Search","artistQuery","searchArtist","search","handleKeyPress","event","updateArtistHistory","target","value","type","placeholder","onChange","onKeyPress","API_ADDRESS","App","fetch","concat","then","response","json","artists","items","catch","error","alert","message","err","component_Search","component_Artist","component_Track","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d13fff5e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Artist = ({artist}) => {\r\n    if(!artist) return null;\r\n\r\n    const {name,followers,genres,images} = artist;\r\n\r\n\r\n    \r\n        return(\r\n            <div className=\"col-md-12\">\r\n                <div className=\"panel panel-primary\">\r\n                    <div className=\"panel-heading\">\r\n                        <h1 className=\"text-center\"> {name} </h1>\r\n                    </div>\r\n                    <div className=\"panel-body\">\r\n                        <img src={images[0]&& images[0].url} alt=\"text\" style={{width:300}} className=\"img-responsive img-thumbnail text-center\"/>\r\n                        <hr/>\r\n                        <ul className=\"list-group\">\r\n                            <li className=\"list-group-item\"> Followers\r\n                            <span className=\"pull-right\"> {followers.total} </span>\r\n\r\n                            </li>\r\n                            \r\n                           \r\n                            <li className=\"list-group-item\"> Genres\r\n                            <span className=\"pull-right\"> {genres.join(',')} </span>\r\n                                \r\n                            </li>\r\n                            {/* <li className=\"list-group-item\"> Uri\r\n                            <span className=\"pull-right\"> {uri} </span> </li> */}\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"panel-footer\">\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Artist;","import React, {Component } from 'react';\r\n\r\nclass Track extends Component{\r\n\r\n    state = {\r\n        playing :false,\r\n        audio : null ,\r\n        playingPreviewUrl : null\r\n    };\r\n\r\n    // audio play pause control logic\r\n    playAudio = previewUrl => () => {\r\n        const audio = new Audio(previewUrl);\r\n\r\n        if(!this.state.playing) {\r\n            //playing control of audio \r\n            audio.play();\r\n            this.setState({playing : true ,audio, playingPreviewUrl : previewUrl});\r\n\r\n        }else {\r\n            //audio player has to pause\r\n            this.state.audio.pause();\r\n\r\n            //pause and play control logic\r\n            if(this.state.playingPreviewUrl === previewUrl) {\r\n                this.setState({ playing : false });\r\n                        }else {\r\n                            audio.play();\r\n                            this.setState({audio, playingPreviewUrl : previewUrl});\r\n                        }\r\n        }\r\n    }\r\n    //audio play and pause logic\r\n\r\n\r\n    //audio player icon control\r\n\r\n    trackIcon = track => {\r\n        if(!track.preview_url) {\r\n            return <span className=\"text-danger\" > N/A </span>\r\n        }\r\n        if (this.state.playing && this.state.playingPreviewUrl === track.preview_url){\r\n            return <span className=\"glyphicon glyphicon-pause\">  </span>\r\n        }\r\n\r\n        return <span className=\"glyphicon glyphicon-play\"> </span>;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const { tracks } = this.props;\r\n        console.log(tracks);\r\n        return (\r\n            <div className=\"row\">\r\n                {\r\n                    this.props.tracks.map( track => \r\n                            {\r\n                            const { id, name, album, preview_url } = track;\r\n                                return(\r\n                                    <div key={id} onClick={this.playAudio(preview_url)} className=\"col-md-3\">\r\n                                        <div className=\"panel panel-info\">\r\n                                            <div className=\"panel-heading\">\r\n                                                <h1 className=\"panel-title\"> { name} </h1>\r\n                                             </div> \r\n                                             <div className=\"panel-body\">\r\n                                                 <img src= { album.images[0].url } alt=\"text\" className = \"img-responsive img-thumbnail\"/>\r\n                                             </div>    \r\n                                             <div className=\"panel-footer\">\r\n                                                <h3 style={{'cursor' : 'pointer'}}> {this.trackIcon(track)} </h3>\r\n                                            </div>  \r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        )\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Track;","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n    state = { artistQuery : ' '};\r\n\r\n    searchArtist = () => {\r\n        this.props.search(this.state.artistQuery);\r\n    }\r\n    handleKeyPress = event => {\r\n        if(event.key === 'Enter'){\r\n            this.searchArtist();\r\n\r\n        }\r\n    }\r\n    updateArtistHistory = event => {\r\n        this.setState({artistQuery : event.target.value });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-md-10 col-md-offset-1 well\">\r\n                    <div className='form-group'>\r\n                        \r\n              <input type=\"search\" className=\"form-control\" placeholder=\"Search Here for an Artist\" onChange = { this.updateArtistHistory} onKeyPress = { this.handleKeyPress} />\r\n             \r\n                        <div className=\"form-group\">\r\n                            <button className=\"btn btn-primary\" onClick={this.searchArtist}> Search </button>\r\n                        </div>\r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React, {Component} from 'react';\nimport Artist from './component/Artist';\nimport Track from './component/Track';\nimport Search from './component/Search';\n\n\nconst API_ADDRESS = 'https://spotify-api-wrapper.appspot.com';\n\nclass App  extends Component {\n\n  state = { artist : null ,tracks : []};\n  \n\n  componentDidMount(){\n\n    this.searchArtist('A R Rehman');\n\n\n  }\n\n  searchArtist = artistQuery => {\n    fetch(`${API_ADDRESS}/artist/${artistQuery}`)\n    .then(response => response.json())\n    .then(json => {\n      console.log(json);\n\n      if(json.artists.total > 0 ){\n        const artist = json.artists.items[0]\n\n        this.setState({artist});\n\n        //api to call top tracks (nested)\n\n        fetch(`${API_ADDRESS}/artist/${artist.id}/top-tracks`)\n        .then(response => response.json())\n        .then(json => {\n          console.log(json.tracks);\n          this.setState({tracks :json.tracks}); \n        })\n        .catch(error => alert(error.message));\n    } \n      }).catch(err => console.log(err));\n  }\n  \n\n  render(){\n    return(\n      <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col-md-12 jumbotron\">\n                <h1 className=\"text-center\" > Music player (spotify API) </h1>\n              </div>\n           </div>   \n              <div className=\"row\">\n                <Search search={this.searchArtist}/>\n                <Artist artist={this.state.artist}/>\n                <Track tracks={this.state.tracks} />\n              </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}